## 05/05/2023 / 14:00 - Notes ##
Why does it take longer to process a rising array
(that is, in theory, already sorted) than a randomized array?
An exceptional stackoverflow post explains this in good detail
https://stackoverflow.com/questions/11227809/why-is-processing-a-sorted-array-faster-than-processing-an-unsorted-array

Branch prediction failure:
If you guess right: it continues on
If you guess wrong: you have to slow down before going again

The quicksort algorithm we implemented has the following issue:
    if len(arr) <= 1:
        return arr

This is the first statement. In the case of a sorted array, our "right" array will never
be just one element or empty, while our left array will always be empty. So when we concatenate our left, right, and pivot,
we will end up moving the pivot one step, and then doing the concatenating again, only to move everything one step again.
Things don't really branch ouch in a seamless way.

branching is also generally bad for performance, and when we do two
recursions for each function call, in quicksort, that results in lots of branching. [1]

Results are similar for arrays holding multiples of only one value.

[1] Measuring the performance Impact of Branching instructions, Beierlieb, others


## 05/05/2023 / 14:45  - Notes ##

We need to plot elements on x, time taken on y. We have to plot our measured data
with deviation in mind, and also the function's expected big O curve.

x = np.array([1, 2, 3, 4, 5])
y = np.power(x, 2) # Effectively y = x**2
e = np.array([1.5, 2.6, 3.7, 4.6, 5.5])

plt.errorbar(x, y, e, linestyle='None', marker='^')

plt.show()



## 06/05/2023/ 09:21 - Notes ##
I found a short pdf on block-quicksort, i think its supposed to be like quicksort but with a smaller likelihood of branch prediction failure.
I'll continue reading it, ill probably download it too, just so that it is in my laptop's files.
"One of the most widely used sorting algorithms is the Quicksort, which has been by Hoare in 1962 and is considered
to be one of the most efficient sorting algorithms (...) Although its average number of comparisons is not optimal
- 138n log n + =(n) vs. n log n + O(n) for Mergesort -, its over-all instruction count is very low. Moreover, by
choosing the pivot element as median of some larger sample, can make the leading term 1.38n log n for the average number
of comparisons smaller - Even down to n log n when choosing the pivot as median of some sample of
growing size. (...) A major drawback of Quicksort is its quadratic worst-case running time. Nevertheless, there are
efficient ways to circumvent a terrible worst-case scenario. (...) The most prominent is Intro-sort (introduced by
Musser) which is applied in GCC implementation of std::sort: As soon as recursion depth exceeds a certain limit, the
algorithm switches to Heapsort. "

Another deficiency of quicksort is that it suffers from branch misses in an essential way. On modern processors with
long pipelines, every missed branch prediction causes a rather long interruption of the execution since the pipeline has
to be filled anew.

Conditional jumps are the usual method of implementing sorting algorithms. These can be avoided.

## 09/05/2023 21:20 - Notes ##
I'm finally healthy enough to look at a screen without getting dizzy again! Sweet.
We have to make a function that will create arrays for the measure_time() function to eat up. This way we can keep our main clean.
Out of these functions, we're going to need to save the lowest and the highest measurements for a given configuration of N, algorithm, and array-type,
we will also save the median. So median, lowest measure, and high measure, are the most important things.

## 11/05/2023 17:33 - Notes ##
I'm alive fr now. We've finished implementing a function that prints out tables and creates graphs for a given algorithm.
what remains to do now is implement the remaining five algorithms, and then plotting different time complexities.

## 11/05/2023 20:18 - Stats ##

python sorted function results with five measurements for each datapoint
randomized list results:
N        median          stddev
2500 0.0005054473876953125 0.00058316414407682
5000 0.0009999275207519531 7.072638022514022e-07
7500 0.0019998550415039062 0.0005620118889983301
10000 0.0020003318786621094 0.0004463922778145106

rising list results:
N        median          stddev
2500 0.0 0.00044707455776484575
5000 0.0 0.00044696793373485174
7500 0.0 0.0005470952748774788
10000 0.0 0.0005478801988450025

falling list results:
N        median          stddev
2500 0.0 0.00044707455776484575
5000 0.0 0.0004467546856748638
7500 0.0 0.00044728780582483377
10000 0.0 0.0005471607437984329

constant list results:
N        median          stddev
2500 0.0 0.0
5000 0.0 0.00044696793373485174
7500 0.0 0.0005470299487947515
10000 0.0 0.0005476841303989978


mergesort results with five measurements for each datapoint
randomized list results:
N        median          stddev
2500 0.004000186920166016 0.0005479882194958366
5000 0.00999903678894043 0.00021921415670995046
7500 0.016000032424926758 0.0008367300797840284
10000 0.020999670028686523 0.0008648898513685886

rising list results:
N        median          stddev
2500 0.004999876022338867 0.00044676082478476825
5000 0.010000228881835938 0.0002267255013467247
7500 0.015999555587768555 0.00047010965889136353
10000 0.020999908447265625 0.0006691674131604476

falling list results:
N        median          stddev
2500 0.004993915557861328 0.00044574865965154247
5000 0.009999752044677734 0.0007069712600379282
7500 0.015679359436035156 0.00041166509975225677
10000 0.021004676818847656 0.001303760435186694

constant list results:
N        median          stddev
2500 0.004993438720703125 0.0005463396308876126
5000 0.009999752044677734 0.0002184898740690884
7500 0.015999794006347656 0.0004315843082703328
10000 0.021608591079711914 0.000251385660002948

bubblesort results with five measurements for each datapoint
randomized list results:
N        median          stddev
2500 0.4094970226287842 0.13818656398267617
5000 1.6669139862060547 0.5558559122161852
7500 3.7643516063690186 1.2303667250206904
10000 6.778673410415649 2.1501134154789883

rising list results:
N        median          stddev
2500 0.4291961193084717 0.010340167326786578
5000 1.7169384956359863 0.023222566596083773
7500 3.7954630851745605 0.00841525913303467
10000 6.698000907897949 0.052710417238638

falling list results:
N        median          stddev
2500 0.4124877452850342 0.27047998677436325
5000 1.6869394779205322 1.0832565038610418
7500 3.8432209491729736 2.4532717021996073
10000 6.844451904296875 4.309071858855752

constant list results:
N        median          stddev
2500 0.4236178398132324 0.0015716708924532429
5000 1.7042903900146484 0.028359793908296002
7500 3.7497246265411377 0.057675111453455406
10000 6.690825462341309 0.0981328815357783

quicksort results with five measurements for each datapoint
randomized list results:
N        median          stddev
2500 0.006308317184448242 0.0004562601466547566
5000 0.014003992080688477 0.0006826919325860669
7500 0.021999835968017578 0.00033697427805630067
10000 0.028770923614501953 0.00023056009790495377

rising list results:
N        median          stddev
2500 0.23729586601257324 0.002417927627484566
5000 0.94183349609375 0.015797938038035485
7500 2.115654230117798 0.01763022330189743
10000 3.7732739448547363 0.0665219294416429

falling list results:
N        median          stddev
2500 0.23856163024902344 0.006094321408629994
5000 0.9246914386749268 0.0282092848757313
7500 2.0601866245269775 0.017693953116232047
10000 3.6870696544647217 0.06284556333822867

constant list results:
N        median          stddev
2500 0.238020658493042 0.0033322335171483207
5000 0.9445099830627441 0.026301007962161983
7500 2.0726213455200195 0.04679792936693795
10000 3.872243642807007 0.06428356069745132


## 13/05/2023 / 14:21 - NOTES ##
Insertion sort acts really weirdly when it's put through
all the functions. It can't seem to produce the correct
results.

## 22/05/2023 / 15:32 - CASE AGAINST C++ ##

Ur Laborationer/översikt:
"Du väljer helt fritt vilken utvecklingsmiljö du skriver labbarna i.
Implementationsspråket är c++ om inget annat anges."
-> dock så angavs något annat:

"Använder du C++ så finns std::chrono:: ur <chrono>"
-> detta antyder att vi *har* ett val i språk. inget språk angavs med samtidigt angavs
ett alternativ i språk i just denna mening. Så något HAR angets, och det är utvecklarfrihet

-> poängen med labben är att implementera och utveckla datastrukturer. Om du så vill att jag ska
implementera allt i c++ och SEDAN läsa in resultaten in i ett grafritande verktyg är det nog
inte så rimligt eftersom samma resultat kommer att få us för sorterings algoritmerna. Vi kommer få
samma big O notation. Jag vill åtminstone ha inlämningslådan öppnad för labbarna som jag har framställd
korrekta resultat för. Jag förstår precis vad som händer i min kod, den råkar bara vara i ett annat
språk.

-> Eftersom du gav parser koden för labb 1 i C++ gjordes labbet i samma språk.

-> Jag har tekniskt sätt inte gjort något fel. om du påstår att allt skulle ha gjorts i c++ skulle
labbinstruktionen motsäga ditt ord.

